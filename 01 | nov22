// Coded on 17-11-2022

/*
IPS:-32
Let L={x1,x2,…,xn} be a array of n elements. Let us search for a key K in the array L. If the key is presented in the array L then partition 
the array L into disjoint ordered arrays L1 and L2 such that

L1={x:xεL such that x≤K} and L2={y:yεL such that y>K}. If the key is not present in the array output is “empty”. Write a PAC, algorithm/pseudocode 
and subsequent Java program for your algorithm to compute arrays L1 and L2   for the given array L and key K. 
Note: Don’t use any inbuilt functions in your program such as sort , in

Example1: If L={16, 15, 1, 27, 19, 100, 200,3} and key k= 27 then L1={1,3,15,16,19,27} and L2={100,200}.

Example 2: If L={16, 15, 1, 27, 19, 100, 200,3} and key k= 127 then empty.

Input format

Enter the list size n

Enter the n numbers

 Enter the key value

Output

Partition of array
*/

// Made using Stack

import java.util.*;

public class Main{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        
        int n = sc.nextInt();
        //int arrn[] = new int[n];
        int key = sc.nextInt();
        Stack<Integer> s1 = new Stack<Integer>();
        Stack<Integer> s2 = new Stack<Integer>();
        int c=0;
        
        for(int i=0;i<n;i++){
            int a = sc.nextInt();
            if(a!=key && c<1){
                s1.push(a);
            }
            else if(a==key){
                s1.push(a);
                c=1;
            }
            else if(c==1){
                s2.push(a);
                c=1;
            }
        }
        
        System.out.println(s1 + " " + s2);
    }
}
